/*
 *      Copyright (C) 2016 Team Kodi
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */
#include "InputStream.h"
#include "utils/StringUtils.h"


namespace ADDON
{

CInputStream::CInputStream(const cp_extension_t* ext) : InputStreamDll(ext)
{
  std::string props = CAddonMgr::GetInstance().GetExtValue(ext->configuration, "@listitemprops");
  m_fileItemProps = StringUtils::Tokenize(props, ",");
  for (auto &key : m_fileItemProps)
  {
    StringUtils::Trim(key);
    key = std::string(ext->plugin->identifier) + "." + key;
  }
}

AddonPtr CInputStream::Clone() const
{
  // Copy constructor is generated by compiler and calls parent copy constructor
  return AddonPtr(new CInputStream(*this));
}

bool CInputStream::Supports(CFileItem &fileitem)
{
  std::string pathList;
  try
  {
    pathList = m_pStruct->GetPathList();
  }
  catch (std::exception &e)
  {
    return false;
  }

  m_pathList = StringUtils::Tokenize(pathList, ",");
  for (auto &path : m_pathList)
  {
    StringUtils::Trim(path);
  }

  bool match = false;
  for (auto &path : m_pathList)
  {
    if (path.compare(0, path.length(), fileitem.GetPath()) == 0)
    {
      match = true;
      break;
    }
  }
  if (!match)
    return false;

  return true;
}

bool CInputStream::Open(CFileItem &fileitem)
{
  INPUTSTREAM props;
  props.m_nCountInfoValues = 0;
  for (auto &key : m_fileItemProps)
  {
    if (fileitem.GetProperty(key).isNull())
      continue;
    props.m_ListItemProperties[props.m_nCountInfoValues].m_strKey = key.c_str();
    props.m_ListItemProperties[props.m_nCountInfoValues].m_strValue = fileitem.GetProperty(key).asString().c_str();
    props.m_nCountInfoValues++;
  }
  props.m_strURL = fileitem.GetPath().c_str();

  bool ret = false;
  try
  {
    ret = m_pStruct->Open(props);
    if (ret)
      m_caps = m_pStruct->GetCapabilities();
  }
  catch (std::exception &e)
  {
    return false;
  }
  return ret;
}

void CInputStream::Close()
{
  try
  {
    m_pStruct->Close();;
  }
  catch (std::exception &e)
  {
    ;
  }
}

} /*namespace ADDON*/

